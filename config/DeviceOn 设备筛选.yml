app:
  description: ''
  icon: 🤖
  icon_background: '#FFEAD5'
  mode: workflow
  name: DeviceOn 设备筛选
  use_icon_as_answer_icon: false
dependencies:
- current_identifier: null
  type: marketplace
  value:
    marketplace_plugin_unique_identifier: langgenius/azure_openai:0.0.12@a8d5448083aededa394d5940f878f6151f4a472e77766222e654840c74d10287
kind: app
version: 0.1.5
workflow:
  conversation_variables: []
  environment_variables:
  - description: ''
    id: f1ad80fb-33a7-47ed-98f8-3d4f41f0626e
    name: filter_error
    selector:
    - env
    - filter_error
    value: app-akKVIu2IfSDr8rc6jY2rpUww
    value_type: string
  - description: ''
    id: 5a77cce8-6e07-41db-88fc-36238f401547
    name: path
    selector:
    - env
    - path
    value: http://172.21.161.126/v1/workflows/run
    value_type: string
  features:
    file_upload:
      allowed_file_extensions:
      - .JPG
      - .JPEG
      - .PNG
      - .GIF
      - .WEBP
      - .SVG
      allowed_file_types:
      - image
      allowed_file_upload_methods:
      - local_file
      - remote_url
      enabled: false
      fileUploadConfig:
        audio_file_size_limit: 50
        batch_count_limit: 5
        file_size_limit: 15
        image_file_size_limit: 10
        video_file_size_limit: 100
        workflow_file_upload_limit: 10
      image:
        enabled: false
        number_limits: 3
        transfer_methods:
        - local_file
        - remote_url
      number_limits: 3
    opening_statement: ''
    retriever_resource:
      enabled: true
    sensitive_word_avoidance:
      enabled: false
    speech_to_text:
      enabled: false
    suggested_questions: []
    suggested_questions_after_answer:
      enabled: false
    text_to_speech:
      enabled: false
      language: ''
      voice: ''
  graph:
    edges:
    - data:
        isInIteration: false
        sourceType: llm
        targetType: code
      id: 1743489418769-source-1743489451080-target
      source: '1743489418769'
      sourceHandle: source
      target: '1743489451080'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: start
        targetType: http-request
      id: 1743489072519-source-1743556295977-target
      source: '1743489072519'
      sourceHandle: source
      target: '1743556295977'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: http-request
        targetType: code
      id: 1743556295977-source-1743556351963-target
      source: '1743556295977'
      sourceHandle: source
      target: '1743556351963'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: code
        targetType: llm
      id: 1743556351963-source-1743489418769-target
      source: '1743556351963'
      sourceHandle: source
      target: '1743489418769'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        isInLoop: false
        sourceType: code
        targetType: if-else
      id: 1743489451080-source-1744079978969-target
      source: '1743489451080'
      sourceHandle: source
      target: '1744079978969'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInLoop: false
        sourceType: if-else
        targetType: end
      id: 1744079978969-false-1743493674581-target
      source: '1744079978969'
      sourceHandle: 'false'
      target: '1743493674581'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        isInLoop: false
        sourceType: if-else
        targetType: http-request
      id: 1744079978969-true-1744161977263-target
      source: '1744079978969'
      sourceHandle: 'true'
      target: '1744161977263'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        isInLoop: false
        sourceType: http-request
        targetType: code
      id: 1744161977263-source-1744162470523-target
      source: '1744161977263'
      sourceHandle: source
      target: '1744162470523'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        isInLoop: false
        sourceType: code
        targetType: end
      id: 1744162470523-source-1744162707319-target
      source: '1744162470523'
      sourceHandle: source
      target: '1744162707319'
      targetHandle: target
      type: custom
      zIndex: 0
    nodes:
    - data:
        desc: ''
        selected: false
        title: 开始
        type: start
        variables:
        - label: question
          max_length: 80000
          options: []
          required: true
          type: paragraph
          variable: question
        - label: type
          max_length: 80000
          options: []
          required: true
          type: paragraph
          variable: type
        - label: content
          max_length: 80000
          options: []
          required: true
          type: paragraph
          variable: content
        - label: timezone
          max_length: 256
          options: []
          required: true
          type: text-input
          variable: timezone
        - label: api
          max_length: 256
          options: []
          required: true
          type: text-input
          variable: api
        - label: token
          max_length: 256
          options: []
          required: true
          type: text-input
          variable: token
      height: 220
      id: '1743489072519'
      position:
        x: 30
        y: 310
      positionAbsolute:
        x: 30
        y: 310
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        context:
          enabled: true
          variable_selector:
          - '1743489072519'
          - question
        desc: ''
        model:
          completion_params:
            temperature: 0
          mode: chat
          name: gpt-4o-mini
          provider: langgenius/azure_openai/azure_openai
        prompt_template:
        - id: 9ad2fbeb-32d6-47bb-bcdd-30364ecf98f8
          role: system
          text: "# 信息提取提示词\n\n## 输入数据\n- `{query}`: `{{#context#}}`\n\n---\n\n## 语言确定\n\
            根据`{query}`文本语言自动确定 `lang` 值，**请注意区分简体中文与繁體中文**：\n- 简体中文 → `zh-CN`\n-\
            \ 繁體中文 → `zh-TW`\n- 英文 → `en-US`\n- 日文 → `ja-JP`\n\n---\n\n## 处理流程\n\n\
            ### 语言自适应\n如果`{query}`文本语言为非简体中文，请自动将下文中的简体中文提示逻辑，应用于`lang`语言场景\n\n---\n\
            \n### 设备信息提取\n\n- **异常状态分析：**\n    - **assign_error**：当`{query}`中匹配到`异常`、`错误`等类似描述时，设置\
            \ `assign_error = true`\n    - **assign_offline**：当`{query}`中匹配到`上下线异常`、`离线(Offline)`、`断线中(Disconnected)`等类似描述时，设置\
            \ `assign_offline = true`\n    - **assign_hardware**：当`{query}`中匹配到 `硬件异常`\
            \ 等类似描述时，设置 `assign_hardware = true`\n    - **assign_software**：当`{query}`中匹配到\
            \ `软件异常` 等类似描述时，设置 `assign_software = true`\n    - **assign_battery**：当`{query}`中匹配到\
            \ `电池异常` 等类似描述时，设置 `assign_battery = true`\n    - **assign_peripheral**：当`{query}`中匹配到\
            \ `周边外设异常` 等类似描述时，设置 `assign_peripheral = true`\n    - **assign_security**：当`{query}`中匹配到\
            \ `设备安全异常` 等类似描述时，设置 `assign_security = true`\n\n- **异常时间分析：**\n    -\
            \ 如果`{query}`文本中匹配到诸如`当前`、`目前`、`当下`、`现在`等表示当前时间的词时，则设置 `assign_now = true`\n\
            \    - 如果`{query}`文本中匹配到诸如`最近`、`近日`等表示模糊时间的词时，则设置 `assign_now = false`\n\
            \    - 如果`{query}`文本中匹配到诸如`近一个月`、`最近一周`、`前5天`等表示具体时间的词时:\n        - 请根据当前时间（`{{#1743556351963.date#}}`），计算出开始日期和结束日期，并设置\
            \ `start_date = 开始日期（格式：YYYY/MM/DD）; end_date = 结束日期（格式：YYYY/MM/DD）`\n\
            \        - 设置 `assign_time = true`\n\n- **在线状态分析：**\n    - **assign_online**:\
            \ 当`{query}`中匹配到`在线(Online)`、`线上`等类似描述时，设置 `assign_online = true`\n\n\
            - **字段提取（所有字段均返回数组；若无匹配返回空数组）：**\n    - **ID字段 (`id`)：**\n        - 在`{query}`文本中**精确匹配**\
            \ `{{#1743556351963.id#}}` 内的任一元素，将所有匹配项存入 `id` 字段。\n    - **名称字段 (`name`)：**\n\
            \        - 在`{query}`文本中**精确匹配** `{{#1743556351963.name#}}` 内的任一元素，将所有匹配项存入\
            \ `name` 字段。\n    - **IP字段 (`ip`)：**\n        - 在`{query}`文本中**精确匹配**\
            \ `{{#1743556351963.ip#}}` 内的任一元素，将所有匹配项存入 `ip` 字段。\n    - **操作系统字段 (`os`)：**\n\
            \        - 检查`{query}`文本中是否匹配到下列关键词或其同义词，若匹配则将对应的操作系统存入 `os` 字段：\n   \
            \         - **windows**：关键词包括 `windows`、`win`、`视窗`；\n            - **android**：关键词包括\
            \ `android`、`安卓`；\n            - **linux**：关键词包括 `linux`、`linux系统`。\n\
            \        - **示例：**\n            - 对于文本`请将安卓设备静音`，则 `os` 提取为 `[\"android\"\
            ]`；\n            - 对于文本`请将win设备静音`，则 `os` 提取为 `[\"windows\"]`。\n    -\
            \ **标签1字段 (`label1`)：**\n        - 在`{query}`文本中**精确匹配** `{{#1743556351963.label1#}}`\
            \ 内的任一元素，将所有匹配项存入 `label1` 字段。\n    - **标签2字段 (`label2`)：**\n        -\
            \ 在`{query}`文本中**精确匹配** `{{#1743556351963.label2#}}` 内的任一元素，将所有匹配项存入 `label2`\
            \ 字段。\n\n- **根据`{query}`内容，确定条件标记：**\n    - **ID标记 (`assign_id`)**: 当`{query}`中匹配到\
            \ `设备ID为...`、`ID为...` 等明确指定ID栏位的描述时，设置 `assign_id = true`\n    - **名称标记\
            \ (`assign_name`)**: 当`{query}`中匹配到 `设备名称为...`、`名为...` 等明确指定名称栏位的描述时，设置\
            \ `assign_name = true`\n    - **IP标记 (`assign_ip`)**: 当`{query}`中匹配到 `设备IP为...`、`IP为...`\
            \ 等明确指定IP栏位的描述时，设置`assign_ip = true`\n    - **系统标记 (`assign_os`)**: 当`{query}`中匹配到\
            \ `OS为...`、`系统为...` 等明确指定系统栏位的描述时，设置 `assign_os = true`\n    - **标签1标记\
            \ (`assign_label1`)**: 当`{query}`中匹配到 `标签1为...`、`标签为...` 等明确指定标签1栏位的描述时，设置\
            \ `assign_label1 = true`\n    - **标签2标记 (`assign_label2`)**: 当`{query}`中匹配到\
            \ `标签2为...`、`标签为...` 等明确指定标签2栏位的描述时，设置 `assign_label2 = true`\n\n- **下标判断：**\n\
            \    - 如果`{query}`文本中匹配到诸如 `第一个`、`第二个` 等指代下标的词时，则设置 `assign_index = 相应的数字`。\n\
            \    - 如果`{query}`文本中匹配到诸如 `最后`、`倒数` 等指代反转的词时，则设置 `assign_last = true`。\n\
            \n---\n\n## 输出格式\n输出 JSON 格式必须符合以下结构：\n```json\n{\n  \"lang\": \"<zh-CN\
            \ | zh-TW | ja-JP | en-US>\",\n  \"targetDevices\": {\n    \"assign_error\"\
            : \"<boolean>\",\n    \"assign_offline\": \"<boolean>\",\n    \"assign_hardware\"\
            : \"<boolean>\",\n    \"assign_software\": \"<boolean>\",\n    \"assign_battery\"\
            : \"<boolean>\",\n    \"assign_peripheral\": \"<boolean>\",\n    \"assign_security\"\
            : \"<boolean>\",\n    \"assign_now\": \"<boolean>\",\n    \"start_date\"\
            : \"<日期字符串，格式 YYYY/MM/DD>\",\n    \"end_date\": \"<日期字符串，格式 YYYY/MM/DD>\"\
            ,\n    \"assign_time\": \"<boolean>\",\n    \"id\": \"<数组>\",\n    \"\
            name\": \"<数组>\",\n    \"ip\": \"<数组>\",\n    \"os\": \"<数组，windows |\
            \ android | linux>\",\n    \"label1\": \"<数组>\",\n    \"label2\": \"<数组>\"\
            ,\n    \"assign_id\": \"<boolean>\",\n    \"assign_name\": \"<boolean>\"\
            ,\n    \"assign_ip\": \"<boolean>\",\n    \"assign_os\": \"<boolean>\"\
            ,\n    \"assign_label1\": \"<boolean>\",\n    \"assign_label2\": \"<boolean>\"\
            ,\n    \"assign_online\": \"<boolean>\",\n    \"assign_index\": \"<number,\
            \ 默认为-1>\",\n    \"assign_last\": \"<boolean>\"\n  }\n}\n```\n\n---\n"
        - id: b9e98ad5-5af8-4e8b-95b5-fcf04b7b0a9e
          role: user
          text: '{{#context#}}'
        selected: false
        title: LLM 设备筛选参数提取
        type: llm
        variables: []
        vision:
          enabled: false
      height: 90
      id: '1743489418769'
      position:
        x: 942
        y: 310
      positionAbsolute:
        x: 942
        y: 310
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        code: "function handleLLM(text) {\n  const regex = /```json([\\s\\S]*?)```/\n\
          \  const _res = text.replaceAll(/<think>[\\s\\S]*?<\\/think>/g, '')\n  const\
          \ match = _res.match(regex);\n  const res = !!match ? match[1].trim() :\
          \ _res\n  const str = res.replaceAll(/\\/\\/.*$/gm, '').replaceAll(/\\/\\\
          *[\\s\\S]*?\\*\\//g, '')\n  let obj\n  try {\n    obj = JSON.parse(str)\n\
          \  } catch (e) {\n    obj = {}\n  }\n  return obj\n}\nfunction convertToTimeZone(timezone)\
          \ {\n  // 检查格式是否以 \"UTC\" 开头\n  if (!timezone.startsWith(\"UTC\")) {\n \
          \   throw new Error(\"时区格式必须以 'UTC' 开头\");\n  }\n  // 获取符号和小时、分钟部分\n  const\
          \ sign = timezone[3]; // '+' 或 '-'\n  if (sign !== '+' && sign !== '-')\
          \ {\n    throw new Error(\"无效的时区格式\");\n  }\n  const hourStr = timezone.substr(4,\
          \ 2);\n  const minuteStr = timezone.substr(7, 2);\n  const offsetHours =\
          \ parseInt(hourStr, 10);\n  const offsetMinutes = parseInt(minuteStr, 10);\n\
          \  // 计算总偏移分钟数（正值代表比 UTC 晚，负值代表比 UTC 早）\n  let totalOffset = offsetHours\
          \ * 60 + offsetMinutes;\n  if (sign === '-') {\n    totalOffset = -totalOffset;\n\
          \  }\n  // 当前的 UTC 毫秒数（Date.now() 返回的是自1970年1月1日 UTC 以来的毫秒数）\n  const nowMs\
          \ = Date.now();\n  // 目标时区的毫秒数 = 当前 UTC 毫秒数 + 时区偏移分钟数转换为毫秒\n  const targetMs\
          \ = nowMs + totalOffset * 60000;\n  const targetDate = new Date(targetMs);\n\
          \  // 使用 getUTC* 方法来提取目标时区的各部分\n  const year = targetDate.getUTCFullYear();\n\
          \  const month = String(targetDate.getUTCMonth() + 1).padStart(2, '0');\
          \ // 月份从 0 开始\n  const day = String(targetDate.getUTCDate()).padStart(2,\
          \ '0');\n  const hours = String(targetDate.getUTCHours()).padStart(2, '0');\n\
          \  const minutes = String(targetDate.getUTCMinutes()).padStart(2, '0');\n\
          \  const seconds = String(targetDate.getUTCSeconds()).padStart(2, '0');\n\
          \n  return `${year}/${month}/${day} ${hours}:${minutes}:${seconds}`;\n}\n\
          function filterDevice(device, llm_result, type, content, api, token, question,\
          \ timezone, flow) {\n  // 处理设备\n  const device_list = Array.isArray(device)\
          \ ? Array.from(device) : []\n  const device_by_id = {}\n  device_list.forEach(o\
          \ => {\n    device_by_id[o.id] = o\n  })\n\n  const lang = String(llm_result?.lang\
          \ ?? '')\n  // 设备异常相关变量\n  const is_error = !!llm_result?.targetDevices?.assign_error\n\
          \  const assign_offline = !!llm_result?.targetDevices?.assign_offline\n\
          \  const assign_hardware = !!llm_result?.targetDevices?.assign_hardware\n\
          \  const assign_software = !!llm_result?.targetDevices?.assign_software\n\
          \  const assign_battery = !!llm_result?.targetDevices?.assign_battery\n\
          \  const assign_peripheral = !!llm_result?.targetDevices?.assign_peripheral\n\
          \  const assign_security = !!llm_result?.targetDevices?.assign_security\n\
          \  const assign_now = !!llm_result?.targetDevices?.assign_now\n  const assign_error\
          \ = is_error && !assign_offline && !assign_hardware && !assign_software\
          \ && !assign_battery && !assign_peripheral && !assign_security\n  const\
          \ has_error = assign_error || assign_offline || assign_hardware || assign_software\
          \ || assign_battery || assign_peripheral || assign_security\n\n  // 筛选设备\n\
          \  let filter = [], request = '', is_find_device = 1\n  // 如果没有涉及异常或者只涉及当前的异常时，只需要从设备列表进行筛选就可以\n\
          \  if (!has_error || (has_error && assign_now)) {\n    // 设备属性筛选相关变量\n \
          \   const id = Array.isArray(llm_result?.targetDevices?.id) ? Array.from(llm_result.targetDevices.id)\
          \ : []\n    const name = Array.isArray(llm_result?.targetDevices?.name)\
          \ ? Array.from(llm_result.targetDevices.name) : []\n    const ip = Array.isArray(llm_result?.targetDevices?.ip)\
          \ ? Array.from(llm_result.targetDevices.ip) : []\n    const os = Array.isArray(llm_result?.targetDevices?.os)\
          \ ? Array.from(llm_result.targetDevices.os).map(s => String(s).toLowerCase())\
          \ : []\n    const label1 = Array.isArray(llm_result?.targetDevices?.label1)\
          \ ? Array.from(llm_result.targetDevices.label1) : []\n    const label2 =\
          \ Array.isArray(llm_result?.targetDevices?.label2) ? Array.from(llm_result.targetDevices.label2)\
          \ : []\n    const assign_id = !!llm_result?.targetDevices?.assign_id\n \
          \   const assign_name = !!llm_result?.targetDevices?.assign_name\n    const\
          \ assign_ip = !!llm_result?.targetDevices?.assign_ip\n    const assign_os\
          \ = !!llm_result?.targetDevices?.assign_os\n    const assign_label1 = !!llm_result?.targetDevices?.assign_label1\n\
          \    const assign_label2 = !!llm_result?.targetDevices?.assign_label2\n\
          \    const assign_online = !!llm_result?.targetDevices?.assign_online\n\
          \    const assign_index = Number(llm_result?.targetDevices?.assign_index)\n\
          \    let not_prop = id.length === 0 && name.length === 0 && ip.length ===\
          \ 0 && os.length === 0 && label1.length === 0 && label2.length === 0\n \
          \   let has_prop = assign_id || assign_name || assign_ip || assign_os ||\
          \ assign_label1 || assign_label2\n    let use_cache = not_prop && !has_prop\
          \ && !assign_online && !has_error\n    if (flow === 'remote_desktop') {\n\
          \      not_prop = id.length === 0 && name.length === 0 && ip.length ===\
          \ 0\n      has_prop = assign_id || assign_name || assign_ip\n      use_cache\
          \ = not_prop && !has_prop && !has_error\n    }\n    let filter_id = []\n\
          \    // 处理已存在设备筛选结果的情况\n    if (!!content && (type === 'find_device' ||\
          \ type === 'find_error')) {\n      const cache = JSON.parse(content)\n \
          \     let cache_device = Array.isArray(cache?.data?.targetDevices) ? Array.from(cache?.data?.targetDevices)\
          \ : []\n      cache_device = cache_device.filter(o => !!device_by_id[o.id]).map(o\
          \ => device_by_id[o.id])\n      // 处理使用下标指定设备的情况\n      const assign_last\
          \ = !!llm_result?.targetDevices?.assign_last\n      if (!Number.isNaN(assign_index)\
          \ && assign_index > 0 && assign_index <= cache_device.length) {\n      \
          \  let index = assign_index - 1\n        if (assign_last) index = cache_device.length\
          \ - 1 - index\n        filter_id = [cache_device[index].id]\n      }\n \
          \     else {\n        filter_id = cache_device.filter(o => {\n         \
          \ const match_id = id.includes(o.id)\n          const match_name = name.includes(o.nm)\n\
          \          const match_ip = ip.includes(o.ip)\n          const match_os\
          \ = os.includes(o.os)\n          const match_label1 = label1.includes(o.l1)\n\
          \          const match_label2 = label2.includes(o.l2)\n          // 当没有指定具体栏位时，只要满足一个条件就行\n\
          \          if (!has_prop) {\n            if (flow === 'remote_desktop')\
          \ return match_id || match_name || match_ip\n            return match_id\
          \ || match_name || match_ip || match_os || match_label1 || match_label2\n\
          \          }\n          // 当有指定具体栏位时，需要满足所有指定栏位\n          let match = true\n\
          \          if (assign_id) match = match && match_id\n          if (assign_name)\
          \ match = match && match_name\n          if (assign_ip) match = match &&\
          \ match_ip\n          if (flow === 'remote_desktop') return match\n    \
          \      if (assign_os) match = match && match_os\n          if (assign_label1\
          \ && !assign_label2) match = match && match_label1\n          if (!assign_label1\
          \ && assign_label2) match = match && match_label2\n          if (assign_label1\
          \ && assign_label2) match = match && (match_label2 || match_label1)\n  \
          \        return match\n        }).map(o => o.id)\n        if (filter_id.length\
          \ === 0 && use_cache && flow !== 'find_device') {\n          filter_id =\
          \ cache_device.map(o => o.id)\n        }\n      }\n    }\n    // 如果经过之前的筛选后，结果仍然为空，则从所有设备中筛选\n\
          \    if (filter_id.length === 0) {\n      filter_id = Object.values(device_by_id).filter(o\
          \ => {\n        const offline = Number(o.st) === 0\n        const hardware\
          \ = Number(o.hw) > 0\n        const software = Number(o.sw) > 0\n      \
          \  const battery = Number(o.bt) > 0\n        const peripheral = Number(o.pp)\
          \ > 0\n        const security = Number(o.hw) > 0\n        const match_error\
          \ = offline || hardware || software || battery || peripheral || security\n\
          \        let match = true\n\n        // 处理异常筛选\n        if (assign_error)\
          \ match = match && match_error\n        if (assign_offline) match = match\
          \ && offline\n        if (assign_hardware) match = match && hardware\n \
          \       if (assign_software) match = match && software\n        if (assign_battery)\
          \ match = match && battery\n        if (assign_peripheral) match = match\
          \ && peripheral\n        if (assign_security) match = match && security\n\
          \        if (!match) return match\n\n        // 处理属性筛选\n        const match_id\
          \ = id.includes(o.id)\n        const match_name = name.includes(o.nm)\n\
          \        const match_ip = ip.includes(o.ip)\n        const match_os = os.includes(o.os)\n\
          \        const match_label1 = label1.includes(o.l1)\n        const match_label2\
          \ = label2.includes(o.l2)\n        const match_online = assign_online &&\
          \ Number(o.st) === 1\n        const match_status = match_online || (!assign_online)\n\
          \        // 当没有匹配任何属性时，只筛选status\n        if (not_prop) return match_status\n\
          \        // 当没有指定具体栏位时，只要满足一个条件就行\n        if (!has_prop) {\n          if\
          \ (flow === 'remote_desktop') return match_id || match_name || match_ip\n\
          \          return (match_id || match_name || match_ip || match_os || match_label1\
          \ || match_label2) && match_status\n        }\n        // 当有指定具体栏位时，需要满足所有指定栏位\n\
          \        if (assign_id) match = match && match_id\n        if (assign_name)\
          \ match = match && match_name\n        if (assign_ip) match = match && match_ip\n\
          \        if (flow === 'remote_desktop') return match\n        match = match\
          \ && match_status\n        if (assign_os) match = match && match_os\n  \
          \      if (assign_label1 && !assign_label2) match = match && match_label1\n\
          \        if (!assign_label1 && assign_label2) match = match && match_label2\n\
          \        if (assign_label1 && assign_label2) match = match && (match_label2\
          \ || match_label1)\n        return match\n      }).map(o => o.id)\n    }\n\
          \    filter = filter_id.map(id => {\n      const o = device_by_id[id]\n\
          \      if (String(flow).endsWith('task')) {\n        return {\n        \
          \  id: o.id,\n          name: o.nm,\n          os: o.os,\n          timezone:\
          \ o.tz,\n        }\n      }\n      return {\n        id: o.id,\n       \
          \ name: o.nm,\n        os: o.os,\n        timezone: o.tz,\n        ip: o.ip,\n\
          \        status: o.st,\n      }\n    })\n    is_find_device = assign_index\
          \ !== -1 || !not_prop || assign_online || has_error ? 1 : 0\n  }\n  // 如果涉及之前的异常，就需要再结合事件列表进行筛选\n\
          \  else {\n    const assign_time = !!llm_result?.targetDevices?.assign_time\n\
          \    const start_date = String(llm_result?.targetDevices?.start_date ??\
          \ '')\n    const end_date = String(llm_result?.targetDevices?.end_date ??\
          \ '')\n    const zone = String(timezone).slice(3)\n    let sd = new Date(`${start_date}\
          \ 00:00:00${zone}`)\n    let ed = new Date(`${end_date} 00:00:00${zone}`)\n\
          \    if (!assign_time) {\n      const now = convertToTimeZone(timezone)\n\
          \      const dt = now.split(' ')[0]\n      ed = new Date(`${dt} 00:00:00${zone}`)\n\
          \      const arr = dt.split('/')\n      const day = Number(arr[2])\n   \
          \   let month = Number(arr[1]) - 4\n      let year = Number(arr[0])\n  \
          \    if (month < 0) {\n        month += 12\n        year -= 1\n      }\n\
          \      const last = new Date(year, month + 1, 0).getDate()\n      const\
          \ date = Math.min(day, last)\n      sd = new Date(`${year}/${month + 1}/${date}\
          \ 00:00:00${zone}`)\n    }\n    const start = sd.getTime()\n    const end\
          \ = ed.getTime() + (24 * 60 * 60 * 1000 - 1)\n    let range = [], params\
          \ = ''\n    if (assign_offline) range = range.concat('4')\n    if (assign_hardware)\
          \ range = range.concat('1')\n    if (assign_software) range = range.concat('2')\n\
          \    if (assign_battery) range = range.concat('6')\n    if (assign_peripheral)\
          \ range = range.concat('3')\n    if (assign_security) range = range.concat('7')\n\
          \    params = `?startTime=${start}&endTime=${end}`\n    range.forEach(item\
          \ => {\n      params += `&categoryRange=${item}`\n    })\n    request =\
          \ JSON.stringify({\n      inputs: {\n        params,\n        range: JSON.stringify(range),\n\
          \        lang,\n        device: JSON.stringify(device),\n        question,\n\
          \        api,\n        token\n      },\n      response_mode: 'blocking',\n\
          \      user: `deviceOn ${flow}`\n    })\n  }\n  return {\n    filter,\n\
          \    is_find_device,\n    lang,\n    request,\n  }\n}\nfunction main({text,\
          \ device, type, content, api, token, question, timezone}) {\n  // 处理 LLM\
          \ 结果\n  const obj = handleLLM(text)\n\n  const {\n    request,\n    filter,\n\
          \    is_find_device,\n    lang,\n  } = filterDevice(JSON.parse(device),\
          \ obj, type, content, api, token, question, timezone, 'find_device')\n \
          \ const result = JSON.stringify({\n    type: 'find_device',\n    data: {\n\
          \      assign_device: true,\n      targetDevices: filter,\n      lang,\n\
          \    }\n  })\n  const task = filter.length > 0 ? 'find_device' : ''\n\n\
          \  return {\n    result,\n    type: task,\n    is_find_device,\n    request,\n\
          \  }\n}"
        code_language: javascript
        desc: ''
        outputs:
          is_find_device:
            children: null
            type: number
          request:
            children: null
            type: string
          result:
            children: null
            type: string
          type:
            children: null
            type: string
        selected: false
        title: 处理设备筛选
        type: code
        variables:
        - value_selector:
          - '1743489418769'
          - text
          variable: text
        - value_selector:
          - '1743489072519'
          - type
          variable: type
        - value_selector:
          - '1743489072519'
          - content
          variable: content
        - value_selector:
          - '1743556351963'
          - device
          variable: device
        - value_selector:
          - '1743489072519'
          - api
          variable: api
        - value_selector:
          - '1743489072519'
          - token
          variable: token
        - value_selector:
          - '1743489072519'
          - question
          variable: question
        - value_selector:
          - '1743489072519'
          - timezone
          variable: timezone
      height: 54
      id: '1743489451080'
      position:
        x: 1245.2857142857142
        y: 310
      positionAbsolute:
        x: 1245.2857142857142
        y: 310
      selected: true
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        desc: ''
        outputs:
        - value_selector:
          - '1743489451080'
          - result
          variable: result
        - value_selector:
          - '1743489451080'
          - type
          variable: type
        - value_selector:
          - '1743489451080'
          - is_find_device
          variable: is_find_device
        selected: false
        title: 返回数据
        type: end
      height: 142
      id: '1743493674581'
      position:
        x: 1854
        y: 287.5
      positionAbsolute:
        x: 1854
        y: 287.5
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        authorization:
          config: null
          type: no-auth
        body:
          data: []
          type: none
        desc: ''
        headers: Authorization:{{#1743489072519.token#}}
        method: get
        params: ''
        retry_config:
          max_retries: 3
          retry_enabled: true
          retry_interval: 100
        selected: false
        timeout:
          max_connect_timeout: 0
          max_read_timeout: 0
          max_write_timeout: 0
        title: 获取设备列表
        type: http-request
        url: '{{#1743489072519.api#}}/walle/ai/device/list'
        variables: []
      height: 139
      id: '1743556295977'
      position:
        x: 334
        y: 310
      positionAbsolute:
        x: 334
        y: 310
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        code: "function convertToTimeZone(timezone) {\n  // 检查格式是否以 \"UTC\" 开头\n \
          \ if (!timezone.startsWith(\"UTC\")) {\n    throw new Error(\"时区格式必须以 'UTC'\
          \ 开头\");\n  }\n  // 获取符号和小时、分钟部分\n  const sign = timezone[3]; // '+' 或 '-'\n\
          \  if (sign !== '+' && sign !== '-') {\n    throw new Error(\"无效的时区格式\"\
          );\n  }\n  const hourStr = timezone.substr(4, 2);\n  const minuteStr = timezone.substr(7,\
          \ 2);\n  const offsetHours = parseInt(hourStr, 10);\n  const offsetMinutes\
          \ = parseInt(minuteStr, 10);\n  // 计算总偏移分钟数（正值代表比 UTC 晚，负值代表比 UTC 早）\n \
          \ let totalOffset = offsetHours * 60 + offsetMinutes;\n  if (sign === '-')\
          \ {\n    totalOffset = -totalOffset;\n  }\n  // 当前的 UTC 毫秒数（Date.now() 返回的是自1970年1月1日\
          \ UTC 以来的毫秒数）\n  const nowMs = Date.now();\n  // 目标时区的毫秒数 = 当前 UTC 毫秒数 +\
          \ 时区偏移分钟数转换为毫秒\n  const targetMs = nowMs + totalOffset * 60000;\n  const\
          \ targetDate = new Date(targetMs);\n  // 使用 getUTC* 方法来提取目标时区的各部分\n  const\
          \ year = targetDate.getUTCFullYear();\n  const month = String(targetDate.getUTCMonth()\
          \ + 1).padStart(2, '0'); // 月份从 0 开始\n  const day = String(targetDate.getUTCDate()).padStart(2,\
          \ '0');\n  const hours = String(targetDate.getUTCHours()).padStart(2, '0');\n\
          \  const minutes = String(targetDate.getUTCMinutes()).padStart(2, '0');\n\
          \  const seconds = String(targetDate.getUTCSeconds()).padStart(2, '0');\n\
          \n  return `${year}/${month}/${day} ${hours}:${minutes}:${seconds}`;\n}\n\
          function main({body, timezone}) {\n  const res = JSON.parse(body)\n  const\
          \ device = Array.isArray(res?.rows) ? Array.from(res.rows).map(o => {\n\
          \    return {\n      id: o.deviceId,\n      nm: o.deviceName,\n      os:\
          \ o.deviceOs,\n      ip: o.deviceIp,\n      l1: o.labelDeviceName1,\n  \
          \    l2: o.labelDeviceName2,\n      st: o.onlineStatus,\n      tz: o.timezone,\n\
          \      hw: o.hardwareError,\n      sw: o.softwareError,\n      bt: o.batteryError,\n\
          \      pp: o.peripheralsError,\n      sc: o.securityError,\n    }\n  })\
          \ : []\n  const id = Array.from(new Set(device.map(o => o.id).filter(o =>\
          \ !!o)))\n  const name = Array.from(new Set(device.map(o => o.nm).filter(o\
          \ => !!o)))\n  const ip = Array.from(new Set(device.map(o => o.ip).filter(o\
          \ => !!o)))\n  const label1 = Array.from(new Set(device.map(o => o.l1).filter(o\
          \ => !!o)))\n  const label2 = Array.from(new Set(device.map(o => o.l2).filter(o\
          \ => !!o)))\n  const date = convertToTimeZone(timezone);\n  return {\n \
          \   device: JSON.stringify(device),\n    id: JSON.stringify(id, null, 2),\n\
          \    name: JSON.stringify(name, null, 2),\n    ip: JSON.stringify(ip, null,\
          \ 2),\n    label1: JSON.stringify(label1, null, 2),\n    label2: JSON.stringify(label2,\
          \ null, 2),\n    date,\n  }\n}"
        code_language: javascript
        desc: ''
        outputs:
          date:
            children: null
            type: string
          device:
            children: null
            type: string
          id:
            children: null
            type: string
          ip:
            children: null
            type: string
          label1:
            children: null
            type: string
          label2:
            children: null
            type: string
          name:
            children: null
            type: string
        selected: false
        title: 处理设备列表
        type: code
        variables:
        - value_selector:
          - '1743556295977'
          - body
          variable: body
        - value_selector:
          - '1743489072519'
          - timezone
          variable: timezone
      height: 54
      id: '1743556351963'
      position:
        x: 638
        y: 310
      positionAbsolute:
        x: 638
        y: 310
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        cases:
        - case_id: 'true'
          conditions:
          - comparison_operator: not empty
            id: 025409d5-d96c-4d74-9f08-e3f0152c2fef
            value: ''
            varType: string
            variable_selector:
            - '1743489451080'
            - request
          id: 'true'
          logical_operator: and
        desc: ''
        selected: false
        title: 判断是否筛选设备异常
        type: if-else
      height: 126
      id: '1744079978969'
      position:
        x: 1550
        y: 310
      positionAbsolute:
        x: 1550
        y: 310
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        authorization:
          config: null
          type: no-auth
        body:
          data:
          - id: key-value-12
            key: ''
            type: text
            value: '{{#1743489451080.request#}}'
          type: json
        desc: ''
        headers: 'Authorization:Bearer {{#env.filter_error#}}

          Content-Type:application/json'
        method: post
        params: ''
        retry_config:
          max_retries: 3
          retry_enabled: true
          retry_interval: 100
        selected: false
        timeout:
          max_connect_timeout: 0
          max_read_timeout: 0
          max_write_timeout: 0
        title: 设备异常筛选
        type: http-request
        url: '{{#env.path#}}'
        variables: []
      height: 123
      id: '1744161977263'
      position:
        x: 1854
        y: 495.5
      positionAbsolute:
        x: 1854
        y: 495.5
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        code: "function main({body}) {\n  const obj = JSON.parse(body)\n  const outputs\
          \ = obj?.data?.outputs ?? {}\n  const type = outputs?.type ?? ''\n  const\
          \ result = outputs?.result ?? ''\n  return {\n    result,\n    type,\n \
          \   is_find_device: 1,\n  }\n}"
        code_language: javascript
        desc: ''
        outputs:
          is_find_device:
            children: null
            type: number
          result:
            children: null
            type: string
          type:
            children: null
            type: string
        selected: false
        title: 处理设备异常筛选结果
        type: code
        variables:
        - value_selector:
          - '1744161977263'
          - body
          variable: body
      height: 54
      id: '1744162470523'
      position:
        x: 2158
        y: 495.5
      positionAbsolute:
        x: 2158
        y: 495.5
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        desc: ''
        outputs:
        - value_selector:
          - '1744162470523'
          - result
          variable: result
        - value_selector:
          - '1744162470523'
          - type
          variable: type
        - value_selector:
          - '1744162470523'
          - is_find_device
          variable: is_find_device
        selected: false
        title: 返回数据
        type: end
      height: 142
      id: '1744162707319'
      position:
        x: 2462
        y: 495.5
      positionAbsolute:
        x: 2462
        y: 495.5
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    viewport:
      x: -904.0000000000011
      y: -129.2421417167452
      zoom: 1.4000000000000006
